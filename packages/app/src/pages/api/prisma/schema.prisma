datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
    // relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    user
    admin
}

model Users {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    uId         String   @unique
    name        String
    email       String?  @unique
    avatar      String?
    role        Role     @default(user)
    isTester    Boolean  @default(false)
    veloz_token String
    veloz_plan  String?  @default("FREE_PKG")
    gh_username String?
    createdAt   DateTime @default(now())

    templateConsumption    TemplateConsumption[]
    purchasedItem          PurchasedItem[]
    order                  Order[]
    invites                Invites[]
    templateInviteSent     CollaboratedTemplates[] @relation("SENDER")
    templateInviteReceived CollaboratedTemplates[] @relation("RECEIVER")

    @@map("users")
}

model TemplateConsumption {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    uId        String
    name       String
    used_count Int      @default(0)
    createdAt  DateTime @default(now())

    user Users @relation(fields: [uId], references: [uId], onDelete: Cascade)

    @@map("template_consumption")
}

model PurchasedItem {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    uId           String
    temp_id       String
    template_name String?
    createdAt     DateTime @default(now())

    user Users @relation(fields: [uId], references: [uId], onDelete: Cascade)

    @@map("purchased_items")
}

model Order {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    uId            String
    temp_id        String
    template_name  String?
    order_id       String?
    payment_status String?
    payment_amount Float?
    user_name      String?
    user_email     String?
    product_id     String?
    variant_id     String?
    createdAt      DateTime @default(now())

    user Users @relation(fields: [uId], references: [uId], onDelete: Cascade)

    @@map("orders")
}

// github invites
model Invites {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    uId           String
    repo_name     String?
    template_name String?
    type          String
    createdAt     DateTime @default(now())

    user Users @relation(fields: [uId], references: [uId], onDelete: Cascade)

    @@map("invites")
}

model CollaboratedTemplates {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    template_id String
    sender_id   String
    receiver_id String
    status      String   @default("pending")
    revoked     Boolean  @default(false)
    createdAt   DateTime @default(now())

    sender   Users @relation(name: "SENDER", fields: [sender_id], references: [uId], onDelete: Cascade)
    receiver Users @relation(name: "RECEIVER", fields: [receiver_id], references: [uId], onDelete: Cascade)

    @@map("collaborated_templates")
}
